import os
import pickle
import numpy as np
import tensorflow as tf
from keras.api.applications.xception import Xception, preprocess_input
from keras.api.preprocessing.image import load_img, img_to_array

def extract_features(directory, batch_size=32):
    """
    Use the Xception model to extract image features in a given directory.
    Features of each image are vectors with 2048 elements.
    """
    model = Xception(weights='imagenet', include_top=False, pooling='avg')
    images = []
    filenames = []
    for filename in os.listdir(directory):
        img_path = os.path.join(directory, filename)
        img = load_img(img_path, target_size=(299, 299))
        x = img_to_array(img)
        x = preprocess_input(x)
        images.append(x)
        filenames.append(filename)
    images_arr = np.stack(images)
    dataset = tf.data.Dataset.from_tensor_slices(images_arr).batch(batch_size)
    features = model.predict(dataset,verbose="2")
    # Return a mapping from filename to corresponding feature vector.
    return dict(zip(filenames, features))

if __name__ == '__main__':
    features = extract_features('Images')
    with open('features.p', 'wb') as f:
        pickle.dump(features, f)
    print("Features extracted successfully.")
    