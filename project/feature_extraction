import os
import pickle
import numpy as np
from keras.api.applications.xception import Xception, preprocess_input
from keras.api.preprocessing.image import load_img, img_to_array

def extract_features(directory):
    """
    Use the Xception model to extract image features in this directory.
    Features of each image is a vector with 2048 elements.
    """
    model = Xception(weights='imagenet', include_top=False, pooling='avg')
    preprocessed_input = {}
    features = {}
    for filename in os.listdir(directory):
        img_path = os.path.join(directory, filename)
        img = load_img(img_path, target_size=(299, 299))
        x = img_to_array(img)
        # x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)
        preprocessed_input[filename] = x
        # feature = model.predict(x)
        # features[filename] = feature.flatten()
    features = model.predict(preprocessed_input)
    return features

if __name__ == '__main__':
    features = extract_features('images')
    with open('features.p', 'wb') as f:
        pickle.dump(features, f)
    with open('features.p', 'rb') as f:
        loaded_features = pickle.load(f)
    print("Features extracted and loaded successfully.")